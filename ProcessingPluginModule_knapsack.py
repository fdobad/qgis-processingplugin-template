# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProcessingPluginClass
                                 A QGIS plugin
 Description of the p p
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-07-12
        copyright            : (C) 2023 by fdo
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "fdo"
__date__ = "2023-07-12"
__copyright__ = "(C) 2023 by fdo"

# This will get replaced with a git SHA1 when you do a git archive

__version__ = "$Format:%H$"
from os import sep
from pathlib import Path
from time import sleep

import numpy as np
import qgis
from grassprovider.Grass7Utils import Grass7Utils
from pandas import DataFrame
from processing.tools.system import getTempFilename
from qgis.core import (QgsFeatureSink, QgsMessageLog, QgsProcessing,
                       QgsProcessingAlgorithm, QgsProcessingFeedback,
                       QgsProcessingParameterDefinition,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterDestination,
                       QgsProcessingParameterRasterLayer, QgsProject)
from qgis.PyQt.QtCore import QCoreApplication


class ProcessingPluginClassAlgorithm_knapsack(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    OUTPUT_layer = "OUTPUT_layer"
    OUTPUT_csv = "OUTPUT_csv"
    INPUT_layer = "INPUT_layer"
    INPUT_ratio = "INPUT_ratio"

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT_layer,
                self.tr("Input layer"),
                [QgsProcessing.TypeRaster],
            )
        )
        # double
        qppn = QgsProcessingParameterNumber(
            name=self.INPUT_ratio,
            description=self.tr("Input ratio to choose"),
            type=QgsProcessingParameterNumber.Double,
            defaultValue=0.069,
            optional=False,
            minValue=0.0,
            maxValue=1.0,
        )
        qppn.setMetadata({"widget_wrapper": {"decimals": 3}})
        self.addParameter(qppn)

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        # QgsProcessingParameterRasterDestination(name: str, description: str = '', defaultValue: Any = None, optional: bool = False, createByDefault: bool = True)
        # QgsProcessingParameterRasterDestination(
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT_layer,
                self.tr("Output layer"),
                QgsProcessing.TypeRaster,
            )
        )
        # self.addParameter(
        #    QgsProcessingParameterFeatureSink(
        #        self.OUTPUT_csv, self.tr("CSV Output"), QgsProcessing.TypeFile
        #    )
        # )

        defaultValue = QgsProject().instance().absolutePath()
        defaultValue = (
            defaultValue + sep + "statistics.csv" if defaultValue != "" else None
        )
        qparamfd = QgsProcessingParameterFileDestination(
            self.OUTPUT_csv,
            self.tr("CSV statistics file output (overwrites!)"),
            defaultValue=defaultValue,
        )
        qparamfd.setMetadata({"widget_wrapper": {"dontconfirmoverwrite": True}})
        self.addParameter(qparamfd)

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        feedback.pushCommandInfo(f"parameters {parameters}")
        feedback.pushCommandInfo(f"context args: {context.asQgisProcessArguments()}")

        input_layer = self.parameterAsRasterLayer(parameters, self.INPUT_layer, context)
        feedback.pushCommandInfo(
            f"input_layer: {input_layer}, type: {type(input_layer)}"
        )

        ratio = self.parameterAsDouble(parameters, self.INPUT_ratio, context)
        feedback.pushCommandInfo(f"ratio {ratio}, type: {type(ratio)}")

        output_file = self.parameterAsFileOutput(parameters, self.OUTPUT_csv, context)
        feedback.pushCommandInfo(
            f"output_file: {output_file}, type: {type(output_file)}"
        )

        df = DataFrame(np.random.randint(0, 10, (4, 3)), columns=["a", "b", "c"])
        df.to_csv(output_file, index=False)

        output_layer = self.parameterAsOutputLayer(
            parameters, self.OUTPUT_layer, context
        )
        feedback.pushCommandInfo(
            f"output_layer: {output_layer}, type: {type(output_layer)}"
        )
        outFormat = Grass7Utils.getRasterFormatFromFilename(output_layer)
        feedback.pushCommandInfo(f"outFormat: {outFormat}")
        # Output results ('map' layer)
        createOpt = None
        # createOpt = self.parameterAsString(
        #     parameters, self.GRASS_RASTER_FORMAT_OPT, context
        # )
        metaOpt = None
        # metaOpt = self.parameterAsString(
        #     parameters, self.GRASS_RASTER_FORMAT_META, context
        # )
        grassName = None  # self.exportedLayers["map"]
        # self.exportRasterLayer(grassName, fileName, True, outFormat, createOpt, metaOpt)

        total = 10
        for i in range(total):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
            sleep(0.1)
            # Update the progress bar
            feedback.setProgress(100 * i / total)

        return {self.OUTPUT_layer: output_layer, self.OUTPUT_csv: output_file}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Knapsack Optimization Fuel Layer Treatment"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Fire A A & M"

    def tr(self, string):
        return QCoreApplication.translate("Processing", string)

    def createInstance(self):
        return ProcessingPluginClassAlgorithm_knapsack()
